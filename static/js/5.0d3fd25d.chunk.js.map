{"version":3,"sources":["constants/apiConstants.ts","api/axiosClient.ts","api/moviesApi.ts","components/MovieCard/index.module.css","pages/Home/index.module.css","components/MovieCard/index.tsx","components/MovieCard/Skeleton.tsx","components/SearchBox/index.tsx","constants/tabConstants.ts","pages/Home/index.tsx"],"names":["BASE_API_URL","getImageFullPath","imageRelativePath","axiosClient","axios","create","baseURL","process","REACT_APP_API_URL","headers","interceptors","request","use","config","params","api_key","response","data","error","Promise","reject","moviesApi","getListMoviesTheaters","url","get","getListMoviesTopRated","getDataDetailMovies","movieId","module","exports","MovieCard","props","title","year","id","poster","isLayoutGrid","history","useHistory","Card","className","styles","root","CardActionArea","cardArea","onClick","push","CardMedia","component","alt","height","image","style","objectFit","CardContent","overText","CardActions","actionsContainer","Typography","gutterBottom","yearSection","fontSize","Skeleton","animation","variant","width","useStyles","makeStyles","theme","padding","display","alignItems","backgroundColor","border","input","marginLeft","spacing","flex","iconButton","SearchBox","onChange","classes","inputRef","useRef","handleChange","current","value","Paper","InputBase","placeholder","fullWidth","onKeyPress","e","key","IconButton","type","defaultProps","TAB_TYPE","LAYOUT_TYPE","Home","useState","searchText","setSearchText","currentPage","setCurrentPage","layoutType","setLayoutType","tabValue","setTabValue","useEffect","remove","setTimeout","refetch","getApiByTab","tab","fetchMovies","pageParam","page","dataResponse","useInfiniteQuery","getNextPageParam","lastPage","pages","total_results","enabled","length","onSuccess","refetchOnWindowFocus","fetchNextPage","hasNextPage","isSuccess","isLoading","status","MoviesLoader","itemCount","Grid","container","Array","map","_","i","item","xs","md","justify","sm","resultsBox","text","tabBox","Tabs","event","tabChange","indicatorColor","textColor","centered","Tab","label","layout","buttonLayout","movieListContainer","dataLength","reduce","a","b","results","next","hasMore","loader","overflow","release_date","poster_path","console","log","renderListMovies","errorMessageContainer","JSON","stringify"],"mappings":"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","file":"static/js/5.0d3fd25d.chunk.js","sourcesContent":["export const BASE_API_URL = \"https://api.themoviedb.org/3/\";\n\nexport const BASE_MOVIES_SECTION_URL = \"movie\";\nexport const BASE_TV_SECTION_URL = \"tv\";\n\nexport function getImageFullPath(imageRelativePath: string) {\n  return `https://image.tmdb.org/t/p/original/${imageRelativePath}`;\n}\n\nexport function getURLWithoutCORS(url: string) {\n  return `https://corsproxy.io/?${url}`;\n}\n","import axios from \"axios\";\n\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request- config` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n});\n\naxiosClient.interceptors.request.use(async (config) => {\n  return {\n    ...config,\n    params: {\n      ...config.params,\n      api_key: process.env.REACT_APP_API_KEY_MOVIE_DB,\n    },\n  };\n});\n\naxiosClient.interceptors.response.use(\n  (response) => {\n    if (response && response.data) {\n      return response.data;\n    }\n\n    return response;\n  },\n  (error) => {\n    // Handle errors\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosClient;\n","import { BASE_API_URL } from \"constants/apiConstants\";\nimport axiosClient from \"./axiosClient\";\n\nexport type GetListMoviesTheatersProps = {\n  page?: number;\n  keyword?: string;\n};\n\nconst moviesApi = {\n  getListMoviesTheaters: (params?: GetListMoviesTheatersProps) => {\n    const url = `${BASE_API_URL}/movie/now_playing`;\n    return axiosClient.get(url, { params });\n  },\n\n  getListMoviesTopRated: (params?: GetListMoviesTheatersProps) => {\n    const url = `${BASE_API_URL}/movie/top_rated`;\n    return axiosClient.get(url, { params });\n  },\n\n  getDataDetailMovies: (movieId: string) => {\n    const url = `${BASE_API_URL}/movie/${movieId}`;\n    return axiosClient.get(url);\n  },\n};\n\nexport default moviesApi;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MovieCard_root__2FC87\",\"cardArea\":\"MovieCard_cardArea__d_8hB\",\"actionsContainer\":\"MovieCard_actionsContainer__3CedU\",\"poster\":\"MovieCard_poster__1zE4I\",\"yearSection\":\"MovieCard_yearSection__2nLRr\",\"overText\":\"MovieCard_overText__pjgb5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__xzpXq\",\"searchBox\":\"Home_searchBox__3uNcw\",\"movieListContainer\":\"Home_movieListContainer__1Z3P4\",\"errorMessageContainer\":\"Home_errorMessageContainer__10SrU\",\"tabBox\":\"Home_tabBox__3iXko\",\"layout\":\"Home_layout__1uNUB\",\"buttonLayout\":\"Home_buttonLayout__3gaKQ\"};","import Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CalendarToday from \"@material-ui/icons/CalendarToday\";\nimport { useHistory } from \"react-router\";\nimport styles from \"./index.module.css\";\n\nexport type MovieCardProps = {\n  title: string;\n  year: string;\n  id: string;\n  poster: string;\n  isLayoutGrid: boolean;\n};\n\nconst MovieCard = (props: MovieCardProps) => {\n  const { title, year, id, poster, isLayoutGrid } = props;\n  const history = useHistory();\n  const handleMovieSelect = () => {\n    history.push(`/${id}`);\n  };\n\n  return (\n    <Card className={styles.root}>\n      <CardActionArea className={styles.cardArea} onClick={handleMovieSelect}>\n        <CardMedia\n          component=\"img\"\n          alt={title}\n          height=\"400\"\n          image={poster}\n          title={title}\n          className={styles.poster}\n          style={{\n            objectFit: isLayoutGrid ? \"cover\" : \"scale-down\",\n          }}\n        />\n        <CardContent className={styles.overText}>\n          <h2>{title}</h2>\n        </CardContent>\n      </CardActionArea>\n      <CardActions className={styles.actionsContainer}>\n        <Typography gutterBottom component=\"i\" className={styles.yearSection}>\n          <CalendarToday fontSize=\"small\" />\n          &nbsp;\n          {year}\n        </Typography>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default MovieCard;\n","import styles from \"./index.module.css\";\nimport { default as MuiSkeleton } from \"@material-ui/lab/Skeleton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst Skeleton = (): React.ReactElement => {\n  return (\n    <Card className={styles.root}>\n      <CardActionArea>\n        <MuiSkeleton\n          animation=\"wave\"\n          variant=\"rect\"\n          width=\"100%\"\n          height={400}\n        />\n        <CardContent className={styles.overText}>\n          <MuiSkeleton\n            animation=\"wave\"\n            variant=\"text\"\n            width=\"80%\"\n            height={40}\n          />\n        </CardContent>\n      </CardActionArea>\n      <CardActions className={styles.actionsContainer}>\n        <MuiSkeleton animation=\"wave\" variant=\"text\" width={100} height={40} />\n        <MuiSkeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Skeleton;\n","import { ReactElement, useRef } from \"react\";\nimport { makeStyles, Paper, InputBase, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\ntype SearchBoxProps = {\n  onChange: (text: string) => void;\n  className?: string;\n};\nconst defaultProps = {\n  onChange: () => {},\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: \"#000000\",\n    border: \"1px solid #f6c700\",\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n}));\n\nconst SearchBox = ({ onChange, className }: SearchBoxProps): ReactElement => {\n  const classes = useStyles();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleChange = () => {\n    if (!!inputRef.current) {\n      onChange(inputRef.current.value);\n    }\n  };\n\n  return (\n    <Paper className={`${classes.root} ${className}`}>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search for a movie\"\n        inputRef={inputRef}\n        fullWidth\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            handleChange();\n          }\n        }}\n      />\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        onClick={handleChange}\n      >\n        <SearchIcon />\n      </IconButton>\n    </Paper>\n  );\n};\n\nSearchBox.defaultProps = defaultProps;\n\nexport default SearchBox;\n","export const TAB_TYPE = {\n  NOW_PLAYING: \"NOW_PLAYING\",\n  TOP_RATED: \"TOP_RATED\",\n};\nexport const LAYOUT_TYPE = {\n  GRID: \"GRID\",\n  LIST: \"LIST\",\n};\n","import { Grid, IconButton } from \"@material-ui/core\";\nimport moviesApi from \"api/moviesApi\";\nimport MovieCard from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport SearchBox from \"components/SearchBox\";\nimport { getImageFullPath } from \"constants/apiConstants\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useInfiniteQuery } from \"react-query\";\nimport styles from \"./index.module.css\";\n\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { LAYOUT_TYPE, TAB_TYPE } from \"constants/tabConstants\";\n\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport ListIcon from \"@material-ui/icons/List\";\n\nconst Home = (): ReactElement => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n  const [layoutType, setLayoutType] = useState(LAYOUT_TYPE.GRID);\n  const [tabValue, setTabValue] = useState(TAB_TYPE.NOW_PLAYING);\n\n  useEffect(() => {\n    setCurrentPage(0);\n    remove();\n    setTimeout(() => {\n      refetch();\n    }, 1000);\n  }, [searchText, tabValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSearchChange = (text: string) => {\n    setSearchText(text);\n  };\n\n  const getApiByTab = (tab: string, params: any) => {\n    switch (tab) {\n      case TAB_TYPE.NOW_PLAYING:\n        return moviesApi.getListMoviesTheaters(params);\n\n      case TAB_TYPE.TOP_RATED:\n        return moviesApi.getListMoviesTopRated(params);\n\n      default:\n        return moviesApi.getListMoviesTheaters(params);\n    }\n  };\n\n  const fetchMovies = async ({ pageParam = 1 }) => {\n    // const data = await service.get(CONSTANTS.BASE_URL, {\n    //   s: searchText,\n    //   page: pageParam,\n    // });\n\n    const params = {\n      page: pageParam,\n    };\n\n    const dataResponse = await getApiByTab(tabValue, params);\n    return dataResponse;\n  };\n\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove,\n    status,\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage: any, pages) => {\n      return +lastPage.total_results > currentPage * 10\n        ? currentPage + 1\n        : null;\n    },\n    enabled: !!searchText.length,\n    onSuccess: (data) => {\n      setCurrentPage(currentPage + 1);\n    },\n    refetchOnWindowFocus: false,\n  });\n\n  const getIsLoading = () => {\n    if (status !== \"success\" || isLoading) return true;\n    return false;\n  };\n\n  const MoviesLoader = (itemCount: number): ReactElement => {\n    return (\n      <Grid container spacing={2}>\n        {[...new Array(itemCount)].map((_, i: number) => (\n          <Grid item xs={12} md={3} key={i}>\n            <Skeleton />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  const renderListMovies = () => {\n    try {\n      if (!!data) {\n        return (\n          <InfiniteScroll\n            dataLength={\n              data.pages.reduce((a, b) => {\n                return { results: [...a.results, ...b.results] };\n              }).results.length\n            }\n            next={fetchNextPage}\n            hasMore={hasNextPage || false}\n            loader={MoviesLoader(4)}\n            style={{ overflow: \"hidden\" }}\n          >\n            <Grid container spacing={2}>\n              {data.pages\n                .reduce((a, b) => {\n                  return { results: [...a.results, ...b.results] };\n                })\n                .results.map((item: any) => {\n                  const { title, id, release_date, poster_path } = item;\n\n                  const isLayoutGrid = layoutType === LAYOUT_TYPE.GRID;\n\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      key={id}\n                      {...(isLayoutGrid && { md: 3 })}\n                    >\n                      <MovieCard\n                        {...{\n                          title,\n                          id,\n                          year: release_date,\n                          poster: getImageFullPath(poster_path),\n                          isLayoutGrid\n                        }}\n                      />\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </InfiniteScroll>\n        );\n      } else {\n        return <>No Result</>;\n      }\n    } catch (error) {\n      console.log(\"🚀 ~ file: index.tsx:80 ~ renderListMovies ~ error\", error);\n    }\n  };\n\n  const handleChangeTab = (event: React.ChangeEvent<{}>, tabChange: string) => {\n    setTabValue(tabChange);\n  };\n\n  return (\n    <div className={styles.root}>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={10}>\n          <Grid container justify=\"center\">\n            <Grid item xs={12} md={4}>\n              <SearchBox\n                className={styles.resultsBox}\n                onChange={handleSearchChange}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container justify=\"center\" className={styles.tabBox}>\n            <Grid item xs={12} md={4}>\n              <Tabs\n                value={tabValue}\n                onChange={handleChangeTab}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                centered\n              >\n                <Tab label=\"Now playing\" value={TAB_TYPE.NOW_PLAYING} />\n                <Tab label=\"Top rated\" value={TAB_TYPE.TOP_RATED} />\n              </Tabs>\n            </Grid>\n          </Grid>\n\n          <Grid container justify=\"flex-end\" className={styles.layout}>\n            <Grid container item xs={12} md={4} justify=\"flex-end\">\n              <IconButton\n                aria-label=\"back\"\n                onClick={() => {\n                  setLayoutType(LAYOUT_TYPE.GRID);\n                }}\n                className={styles.buttonLayout}\n              >\n                <AppsIcon />\n              </IconButton>\n\n              <IconButton\n                aria-label=\"back\"\n                onClick={() => {\n                  setLayoutType(LAYOUT_TYPE.LIST);\n                }}\n                className={styles.buttonLayout}\n              >\n                <ListIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12} className={styles.movieListContainer}>\n            {/* Loading state */}\n            {getIsLoading() && MoviesLoader(8)}\n\n            {/* Success state */}\n            {isSuccess && renderListMovies()}\n\n            {/* Error state */}\n            {!!error && (\n              <div className={styles.errorMessageContainer}>\n                {JSON.stringify(error)}\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}